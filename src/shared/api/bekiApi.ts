/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/auth/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_registration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["AuthController_logout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController_refresh"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProfileController_getUserData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PublicMangaController_getMangaList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/last-updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Optional auth endpoint */
        get: operations["PublicMangaController_getLastUpdatedMangas"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/related/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PublicMangaController_getRelatedManga"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/quick-search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Optional auth endpoint */
        get: operations["QuickSearchController_getMangaQuickSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/quick-search/last": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["QuickSearchController_getUserLastSearchQueries"];
        put?: never;
        post?: never;
        delete: operations["QuickSearchController_deleteUserLastSearchQuery"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/continue-read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ContinueReadMangaController_getContinueReadManga"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/continue-read/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ContinueReadMangaController_dontShowContinueReadManga"];
        trace?: never;
    };
    "/manga/edit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EditMangaController_getEditedManga"];
        put: operations["EditMangaController_updateManga"];
        post?: never;
        delete: operations["EditMangaController_deleteManga"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/edit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditMangaController_createManga"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/edit/{id}/covers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EditMangaCoverController_getMangaCovers"];
        put?: never;
        post: operations["EditMangaCoverController_addMangaCovers"];
        delete: operations["EditMangaCoverController_deleteMangaCovers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/byId/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Optional auth endpoint */
        get: operations["IndividualMangaController_getManga"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/byId/{id}/covers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["IndividualMangaController_getMangaCovers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/byId/{id}/bookmark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["BookmarkController_getUserMangaBookmark"];
        put?: never;
        post?: never;
        delete: operations["BookmarkController_deleteUserMangaBookmark"];
        options?: never;
        head?: never;
        patch: operations["BookmarkController_setUserMangaBookmark"];
        trace?: never;
    };
    "/manga/byId/{id}/rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["RateController_getUserMangaRate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["RateController_setUserMangaRate"];
        trace?: never;
    };
    "/manga/genres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MangaGenresController_getGenres"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MangaTagsController_getTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/statistic/{id}/rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MangaStatisticController_getRateStatistic"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/statistic/{id}/bookmark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MangaStatisticController_getBookmarkStatistic"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/chapter/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Optional auth endpoint */
        get: operations["PublicChapterController_getChapter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/{mangaId}/chapters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Optional auth endpoint */
        get: operations["PublicChapterController_getChapterList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/chapter/{id}/like": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ChapterActionController_setUserLikeChapter"];
        trace?: never;
    };
    "/manga/chapter/{id}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ChapterActionController_setUserViewChapter"];
        trace?: never;
    };
    "/manga/edit/{mangaId}/chapter/{chapterId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EditChapterController_getEditedChapter"];
        put: operations["EditChapterController_updateChapter"];
        post?: never;
        delete: operations["EditChapterController_deleteChapter"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/edit/{mangaId}/chapter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EditChapterController_getEditedChapterList"];
        put?: never;
        post: operations["EditChapterController_createChapter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/edit/{mangaId}/chapter/{chapterId}/pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EditChapterPagesController_getChapterPages"];
        put: operations["EditChapterPagesController_setChapterPages"];
        post: operations["EditChapterPagesController_addPage"];
        delete: operations["EditChapterPagesController_deletePage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/manga/edit/{mangaId}/chapter/{chapterId}/pages/lang": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EditChapterPagesController_addLangChapterPages"];
        delete: operations["EditChapterPagesController_deleteLangChapterPages"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        CreateUserDto: {
            login: string;
            password: string;
        };
        AuthUserDto: {
            id: number;
            login: string;
            name: string;
            sub: number;
        };
        AuthTokens: {
            access: string;
            refresh: string;
        };
        ReturnAuthUser: {
            user: components["schemas"]["AuthUserDto"];
            tokens: components["schemas"]["AuthTokens"];
        };
        LoginUserDto: {
            login: string;
            password: string;
        };
        ErrorType: {
            message: string;
            statusCode: number;
            error?: string;
        };
        UserDataDto: {
            id: number;
            name: string;
            avatar: string | null;
            jsonSettings: Record<string, never>;
        };
        MangaListItemDto: {
            id: number;
            urlId: string;
            title: string;
            rate: number;
            /** @enum {string} */
            type: "Manga" | "Manhwa" | "Manhua" | "OEL" | "Rumanga" | "Comic";
            cover: string;
            /** @enum {string|null} */
            bookmark: "Reading" | "Planned" | "Readed" | "Abandoned" | "Postponed" | null;
            chapterCount: number;
        };
        MangaListItemPagination: {
            prevPage: number | null;
            nextPage: number | null;
            data: components["schemas"]["MangaListItemDto"][];
        };
        MangaListItemLastUpdatedDto: {
            id: number;
            urlId: string;
            title: string;
            /** @enum {string} */
            type: "Manga" | "Manhwa" | "Manhua" | "OEL" | "Rumanga" | "Comic";
            cover: string;
            tome: number;
            chapter: number;
            /** Format: date-time */
            chapterCreatedAt: string;
            chapterId: number;
        };
        MangaListItemLastUpdatedPagination: {
            prevPage: number | null;
            nextPage: number | null;
            data: components["schemas"]["MangaListItemLastUpdatedDto"][];
        };
        MangaListItemStatisticDto: {
            id: number;
            urlId: string;
            title: string;
            /** @enum {string} */
            type: "Manga" | "Manhwa" | "Manhua" | "OEL" | "Rumanga" | "Comic";
            cover: string;
            views: number;
            likes: number;
            bookmarks: number;
        };
        MangaListItemStatisticResponseArrayData: {
            data: components["schemas"]["MangaListItemStatisticDto"][];
        };
        QuickSearchLastDto: {
            data: string[];
        };
        DeleteSearchDto: {
            search: string;
        };
        MangaListItemContinueReadDto: {
            id: number;
            urlId: string;
            title: string;
            cover: string;
            tome: number;
            chapter: number;
            chapterCount: number;
            readedChapters: number;
            chapterId: number;
        };
        MangaListItemContinueReadResponseArrayData: {
            data: components["schemas"]["MangaListItemContinueReadDto"][];
        };
        EditedMangaTitle: {
            ru: string;
            en: string | null;
            origin: string | null;
        };
        EditedMangaOtherTitles: {
            id: number;
            title: string;
        };
        EditedMangaDescription: {
            ru: string;
            en: string | null;
        };
        EditedMangaGenresAndTags: {
            id: number;
            title: string;
        };
        EditedMangaCover: {
            id: number;
            cover: string;
            main: boolean;
        };
        EditedMangaAuthors: {
            id: number;
            name: string;
        };
        EditedMangaDto: {
            id: number;
            urlId: string;
            title: components["schemas"]["EditedMangaTitle"];
            otherTitles: components["schemas"]["EditedMangaOtherTitles"][];
            description: components["schemas"]["EditedMangaDescription"];
            /** Format: date-time */
            releaseDate: string | null;
            /** @enum {string} */
            status: "Ongoing" | "Announced" | "Completed" | "Frozen" | "Canceled";
            /** @enum {string} */
            type: "Manga" | "Manhwa" | "Manhua" | "OEL" | "Rumanga" | "Comic";
            genres: components["schemas"]["EditedMangaGenresAndTags"][];
            tags: components["schemas"]["EditedMangaGenresAndTags"][];
            covers: components["schemas"]["EditedMangaCover"][];
            banner: string | null;
            ageRate: number;
            authors: components["schemas"]["EditedMangaAuthors"][];
            artists: components["schemas"]["EditedMangaAuthors"][];
            publishers: components["schemas"]["EditedMangaAuthors"][];
        };
        MutateMangaDto: {
            urlId?: string;
            title?: {
                ru?: string;
                en?: string;
                origin?: string;
            };
            otherTitles?: {
                createTitles?: string[];
                updateTitles?: {
                    id: number;
                    title: string;
                }[];
                deleteTitles?: number[];
            };
            description?: {
                ru?: string;
                en?: string;
            };
            /** @enum {string} */
            status?: "Ongoing" | "Announced" | "Completed" | "Frozen" | "Canceled";
            /** @enum {string} */
            type?: "Manga" | "Manhwa" | "Manhua" | "OEL" | "Rumanga" | "Comic";
            /** Format: date-time */
            releaseDate?: string;
            genres?: {
                add?: number[];
                delete?: number[];
                set?: number[];
            };
            tags?: {
                add?: number[];
                delete?: number[];
                set?: number[];
            };
            coverId?: number;
            banner?: string;
            ageRate: number;
            authors?: {
                add?: string[];
                delete?: number[];
            };
            artists?: {
                add?: string[];
                delete?: number[];
            };
            publishers?: {
                add?: string[];
                delete?: number[];
            };
        };
        EditedMangaCoverResponseArrayData: {
            data: components["schemas"]["EditedMangaCover"][];
        };
        DeleleMangaCoversDto: {
            coversId: unknown[][];
        };
        MangaTitle: {
            ru: string;
            en: string | null;
            origin: string | null;
        };
        MangaGenresAndTag: {
            id: number;
            title: string;
        };
        UserBaseDto: {
            id: number;
            name: string;
            avatar: string | null;
        };
        MangaDto: {
            id: number;
            urlId: string;
            title: components["schemas"]["MangaTitle"];
            otherTitles: string[];
            description: string;
            chaptersCount: number;
            rate: number;
            countRate: number;
            /** Format: date-time */
            releaseDate: string | null;
            /** @enum {string} */
            status: "Ongoing" | "Announced" | "Completed" | "Frozen" | "Canceled";
            /** @enum {string} */
            type: "Manga" | "Manhwa" | "Manhua" | "OEL" | "Rumanga" | "Comic";
            genres: components["schemas"]["MangaGenresAndTag"][];
            tags: components["schemas"]["MangaGenresAndTag"][];
            cover: string | null;
            banner: string | null;
            owner: components["schemas"]["UserBaseDto"];
            authors: string[];
            artists: string[];
            publishers: string[];
            /** @enum {string|null} */
            bookmark: "Reading" | "Planned" | "Readed" | "Abandoned" | "Postponed" | null;
        };
        MangaCoverDto: {
            id: number;
            cover: string;
        };
        MangaCoverArrayData: {
            data: components["schemas"]["MangaCoverDto"][];
        };
        UserMangaBookmarkDto: {
            mangaId: number;
            userId: number;
            /** @enum {string|null} */
            bookmark: "Reading" | "Planned" | "Readed" | "Abandoned" | "Postponed" | null;
        };
        BookmarkDto: {
            /** @enum {string} */
            bookmark: "Reading" | "Planned" | "Readed" | "Abandoned" | "Postponed";
        };
        UserMangaRateDto: {
            rate: number | null;
            mangaId: number;
            userId: number;
        };
        SetUserMangaRateDto: {
            rate: number;
        };
        CategoryDto: {
            id: number;
            title: string;
        };
        CategoriesResponseArrayData: {
            data: components["schemas"]["CategoryDto"][];
        };
        StatisticItemDto: {
            count: number;
            percentage: number;
            title: string;
        };
        ApiRateFullStatisticDto: {
            rate: number;
            rateCount: number;
            /** @description Массив из 10 элементов рейтинга от 1 до 10 */
            rateStatistic: components["schemas"]["StatisticItemDto"][];
        };
        ApiBookmarkStatisticDto: {
            all: number;
            /** @description Массив из 5 элементов вида закладок. Порядок Reading, Planned, Readed, Abandoned, Postponed */
            bookmarks: components["schemas"]["StatisticItemDto"][];
        };
        ChapterPageDto: {
            src: string;
            /** @enum {string} */
            type: "image" | "rive";
        };
        ChapterPagesDto: {
            pages: components["schemas"]["ChapterPageDto"][];
            pageCount: number;
            /** @default 700 */
            containerMaxWidth: number;
        };
        ChapterDto: {
            id: number;
            tome: number;
            chapter: number;
            title: string | null;
            mangaTitle: string;
            likeCount: number;
            prevChapterId: number | null;
            nextChapterId: number | null;
            isUserLiked: boolean;
            isUserViewed: boolean;
            pages: components["schemas"]["ChapterPagesDto"];
        };
        ChapterListItemDto: {
            id: number;
            tome: number;
            chapter: number;
            title: string | null;
            /** Format: date-time */
            createdAt: string;
            isUserViewed: boolean;
        };
        ChapterListPagination: {
            prevPage: number | null;
            nextPage: number | null;
            data: components["schemas"]["ChapterListItemDto"][];
        };
        EditChapterTitle: {
            ru: string | null;
            en: string | null;
        };
        EditedChpaterDto: {
            id: number;
            title: components["schemas"]["EditChapterTitle"];
            tome: number;
            chpater: number;
            private: boolean;
            mangaId: number;
        };
        EditedChapterListItemDto: {
            id: number;
            tome: number;
            chapter: number;
            title: string | null;
            /** Format: date-time */
            createdAt: string;
            private: boolean;
        };
        EditedChapterListPagination: {
            prevPage: number | null;
            nextPage: number | null;
            data: components["schemas"]["EditedChapterListItemDto"][];
        };
        MutateChapterDto: {
            title?: {
                ru?: string;
                en?: string;
            };
            tome?: number;
            chapter?: number;
            private?: boolean;
        };
        LangQueryDto: {
            /**
             * @default ru
             * @enum {string}
             */
            lang: "ru" | "en";
        };
        DeleteChapterPageDto: {
            pageSrc: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    AuthController_registration: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReturnAuthUser"];
                };
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReturnAuthUser"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReturnAuthUser"];
                };
            };
        };
    };
    AuthController_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReturnAuthUser"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    ProfileController_getUserData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User id get from token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDataDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    PublicMangaController_getMangaList: {
        parameters: {
            query?: {
                sortBy?: "rating" | "updateDate" | "createDate" | "ruAlphabetically" | "enAlphabetically" | "views" | "likes" | "chapterCount";
                search?: string;
                /** @description Comma-separated list of categories IDs, e.g. "1,2,3" */
                genres?: string;
                /** @description Comma-separated list of categories IDs, e.g. "1,2,3" */
                tags?: string;
                /** @description Comma-separated list of categories IDs, e.g. "1,2,3" */
                notGenres?: string;
                /** @description Comma-separated list of categories IDs, e.g. "1,2,3" */
                notTags?: string;
                /** @description Comma-separated list, e.g. "el1,el2,el3" */
                status?: string;
                /** @description Comma-separated list, e.g. "el1,el2,el3" */
                type?: string;
                /** @description Comma-separated list, e.g. "el1,el2,el3" */
                bookmarks?: string;
                lang?: "ru" | "en";
                order?: "asc" | "desc";
                page?: number;
                limit?: number;
                ageRateFrom?: number;
                ageRateTo?: number;
                chapterCountFrom?: number;
                chapterCountTo?: number;
                rateCountFrom?: number;
                rateCountTo?: number;
                rateFrom?: number;
                rateTo?: number;
                releaseDateFrom?: string;
                releaseDateTo?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MangaListItemPagination"];
                };
            };
        };
    };
    PublicMangaController_getLastUpdatedMangas: {
        parameters: {
            query?: {
                /** @description "my" for authorized users */
                scope?: "all" | "popular" | "my";
                lang?: "ru" | "en";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description scope 'my' for authorized users only */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MangaListItemLastUpdatedPagination"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    PublicMangaController_getRelatedManga: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path: {
                /** @description urlId or just id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MangaListItemStatisticResponseArrayData"];
                };
            };
        };
    };
    QuickSearchController_getMangaQuickSearch: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MangaListItemStatisticResponseArrayData"];
                };
            };
        };
    };
    QuickSearchController_getUserLastSearchQueries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuickSearchLastDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    QuickSearchController_deleteUserLastSearchQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteSearchDto"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    ContinueReadMangaController_getContinueReadManga: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MangaListItemContinueReadResponseArrayData"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    ContinueReadMangaController_dontShowContinueReadManga: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description set id to 0 to delete all manga */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    EditMangaController_getEditedManga: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditedMangaDto"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    EditMangaController_updateManga: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description 1 баннер (формат — файл) */
                    banner?: string[];
                    body?: components["schemas"]["MutateMangaDto"];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditedMangaDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    EditMangaController_deleteManga: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EditMangaController_createManga: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description 1 обложка (формат — файл) */
                    covers?: string[];
                    /** @description 1 баннер (формат — файл) */
                    banner?: string[];
                    body?: components["schemas"]["MutateMangaDto"];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditedMangaDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    EditMangaCoverController_getMangaCovers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditedMangaCoverResponseArrayData"];
                };
            };
        };
    };
    EditMangaCoverController_addMangaCovers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description До 5 изображений обложек (формат — файл) */
                    covers?: string[];
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditedMangaCoverResponseArrayData"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    EditMangaCoverController_deleteMangaCovers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleleMangaCoversDto"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    IndividualMangaController_getManga: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path: {
                /** @description urlId or just id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MangaDto"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    IndividualMangaController_getMangaCovers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description urlId or just id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MangaCoverArrayData"];
                };
            };
        };
    };
    BookmarkController_getUserMangaBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description urlId or just id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMangaBookmarkDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    BookmarkController_deleteUserMangaBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description urlId or just id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    BookmarkController_setUserMangaBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description urlId or just id */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookmarkDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMangaBookmarkDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    RateController_getUserMangaRate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description urlId or just id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMangaRateDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    RateController_setUserMangaRate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description urlId or just id */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetUserMangaRateDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMangaRateDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    MangaGenresController_getGenres: {
        parameters: {
            query?: {
                search?: string;
                lang?: "ru" | "en";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriesResponseArrayData"];
                };
            };
        };
    };
    MangaTagsController_getTags: {
        parameters: {
            query?: {
                search?: string;
                lang?: "ru" | "en";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriesResponseArrayData"];
                };
            };
        };
    };
    MangaStatisticController_getRateStatistic: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description urlId or just id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "rate": 0,
                     *       "rateCount": 0,
                     *       "rateStatistic": [
                     *         {
                     *           "title": "1",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "2",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "3",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "4",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "5",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "6",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "7",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "8",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "9",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "10",
                     *           "count": 0,
                     *           "percentage": 0
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["ApiRateFullStatisticDto"];
                };
            };
        };
    };
    MangaStatisticController_getBookmarkStatistic: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description urlId or just id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "all": 0,
                     *       "bookmarks": [
                     *         {
                     *           "title": "Reading",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "Planned",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "Readed",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "Abandoned",
                     *           "count": 0,
                     *           "percentage": 0
                     *         },
                     *         {
                     *           "title": "Postponed",
                     *           "count": 0,
                     *           "percentage": 0
                     *         }
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["ApiBookmarkStatisticDto"];
                };
            };
        };
    };
    PublicChapterController_getChapter: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterDto"];
                };
            };
        };
    };
    PublicChapterController_getChapterList: {
        parameters: {
            query?: {
                search?: string;
                lang?: "ru" | "en";
                page?: number;
                limit?: number;
                order?: "asc" | "desc";
            };
            header?: never;
            path: {
                mangaId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterListPagination"];
                };
            };
        };
    };
    ChapterActionController_setUserLikeChapter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    ChapterActionController_setUserViewChapter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    EditChapterController_getEditedChapter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mangaId: string;
                chapterId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditedChpaterDto"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorType"];
                };
            };
        };
    };
    EditChapterController_updateChapter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mangaId: string;
                chapterId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MutateChapterDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditedChpaterDto"];
                };
            };
        };
    };
    EditChapterController_deleteChapter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mangaId: string;
                chapterId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EditChapterController_getEditedChapterList: {
        parameters: {
            query?: {
                search?: string;
                lang?: "ru" | "en";
                page?: number;
                limit?: number;
                order?: "asc" | "desc";
            };
            header?: never;
            path: {
                mangaId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditedChapterListPagination"];
                };
            };
        };
    };
    EditChapterController_createChapter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mangaId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MutateChapterDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EditedChpaterDto"];
                };
            };
        };
    };
    EditChapterPagesController_getChapterPages: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path: {
                mangaId: string;
                chapterId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterPagesDto"];
                };
            };
        };
    };
    EditChapterPagesController_setChapterPages: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path: {
                mangaId: string;
                chapterId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChapterPagesDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterPagesDto"];
                };
            };
        };
    };
    EditChapterPagesController_addPage: {
        parameters: {
            query?: {
                returnValue?: boolean;
                lang?: "ru" | "en";
            };
            header?: never;
            path: {
                mangaId: string;
                chapterId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Одна страница за раз (формат — файл) */
                    page?: string[];
                };
            };
        };
        responses: {
            /** @description Возвращает данные в ответе только если returnValue=true */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterPagesDto"];
                };
            };
        };
    };
    EditChapterPagesController_deletePage: {
        parameters: {
            query?: {
                lang?: "ru" | "en";
            };
            header?: never;
            path: {
                mangaId: string;
                chapterId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteChapterPageDto"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EditChapterPagesController_addLangChapterPages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mangaId: string;
                chapterId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LangQueryDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChapterPagesDto"];
                };
            };
        };
    };
    EditChapterPagesController_deleteLangChapterPages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mangaId: string;
                chapterId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LangQueryDto"];
            };
        };
        responses: {
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
